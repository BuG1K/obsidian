// bot/handlers.js
import TelegramBot from "node-telegram-bot-api";
import User from "@/database/User";
import { mainMenu, shareContactKeyboard, homeOnly } from "./keyboards";
import { getUser, setUser } from "./store";

const CONTACTS_STATIC = {
  phone: "89086660990",
  vk: "-",
  address: "-",
};

async function sendHome(bot: TelegramBot, chatId: number) {
  await bot.sendMessage(
    chatId,
    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    { reply_markup: mainMenu },
  );
}

async function sendProfile(bot: TelegramBot, chatId: number) {
  const u = getUser(chatId);
  const nickname = u.nickname || "-";
  const bonus = u.bonus ?? 0;

  await bot.sendMessage(
    chatId,
    `üë§ –ü—Ä–æ—Ñ–∏–ª—å\n–ù–∏–∫–Ω–µ–π–º: ${nickname}\n–ë–æ–Ω—É—Å—ã: ${bonus}`,
    { reply_markup: mainMenu },
  );
}

async function sendPrice(bot: TelegramBot, chatId: number) {
  await bot.sendMessage(
    chatId,
    "sdfsfddf",
    { reply_markup: mainMenu },
  );
}

async function sendContacts(bot: TelegramBot, chatId: number) {
  await bot.sendMessage(
    chatId,
    `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${CONTACTS_STATIC.phone}\n–ì—Ä—É–ø–ø–∞ –í–ö: ${CONTACTS_STATIC.vk}\n–ê–¥—Ä–µ—Å: ${CONTACTS_STATIC.address}`,
    { reply_markup: mainMenu },
  );
}

export async function handleStart(bot: TelegramBot, msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  setUser(chatId, { step: "await_nickname" });

  await bot.sendMessage(
    chatId,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:",
  );
}

export async function handleText(bot: TelegramBot, msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  const text = (msg.text || "").trim();
  const user = getUser(chatId);

  // –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–∞—è"
  if (text === "üè† –ì–ª–∞–≤–Ω–∞—è") {
    await sendHome(bot, chatId);
    return;
  }

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —à–∞–≥–∏
  if (user.step === "await_nickname") {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ –ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
    setUser(chatId, { nickname: text, step: "await_contact" });
    await bot.sendMessage(
      chatId,
      `–û—Ç–ª–∏—á–Ω–æ, ${text}! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:`,
      { reply_markup: shareContactKeyboard },
    );
    return;
  }

  // –ú–µ–Ω—é
  if (text === "üë§ –ü—Ä–æ—Ñ–∏–ª—å") {
    await sendProfile(bot, chatId);
    return;
  }

  if (text === "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã") {
    await sendContacts(bot, chatId);
    return;
  }

  if (text === "üíµ –¶–µ–Ω—ã") {
    await sendPrice(bot, chatId);
    return;
  }

  if (text === "üí¨ –û—Ç–∑—ã–≤—ã") {
    setUser(chatId, { step: "await_review" });
    await bot.sendMessage(chatId, "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", { reply_markup: homeOnly });
    return;
  }

  if (text === "üéÅ –ê–∫—Ü–∏–∏") {
    setUser(chatId, { step: "await_promo" });
    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", { reply_markup: homeOnly });

    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–≥–æ–≤
  if (user.step === "await_review") {
    setUser(chatId, { lastReview: text, step: null });
    await bot.sendMessage(
      chatId,
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üôå",
      { reply_markup: mainMenu },
    );
    return;
  }

  if (user.step === "await_promo") {
  // –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const validPromos = ["PROMO2024", "HELLO", "BONUS100"];

    if (validPromos.includes(text.toUpperCase())) {
      setUser(chatId, { lastPromo: text, step: null });
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! üéâ",
        { reply_markup: mainMenu },
      );
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã
    } else {
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
        { reply_markup: homeOnly },
      );
    // step –Ω–µ –º–µ–Ω—è–µ–º ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
    }
    return;
  }

  // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  await sendHome(bot, chatId);
}

export async function handleContact(bot: TelegramBot, msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  const phone = msg.contact?.phone_number || null;

  if (!phone) {
    await bot.sendMessage(chatId, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", {
      reply_markup: shareContactKeyboard,
    });
    return;
  }

  await User.create({
    name, phone, telegram, points: "0",
  });
  setUser(chatId, { phone, step: null });

  await bot.sendMessage(
    chatId,
    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ",
    { reply_markup: mainMenu },
  );
  await sendProfile(bot, chatId);
}
