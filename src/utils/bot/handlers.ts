// bot/handlers.js
import TelegramBot from "node-telegram-bot-api";
import User from "@/database/User";
import connectDB from "@/database/db";
import { mainMenu, shareContactKeyboard, homeOnly } from "./keyboards";
import { getUser, setUser } from "./store";

const CONTACTS_STATIC = {
  phone: "+7 (914) 935-84-04",
  vk: "-",
  address: "—É–ª. –ö–æ–ª—Ö–æ–∑–Ω–∞—è –ø–ª, 40, –ß–µ—Ä–µ–º—Ö–æ–≤–æ",
};

// function escapeMarkdownV2(text: string) {
//   return text.replace(/([_*\[\]()~`>#+\-=|{}.!\\-])/g, "\\$1");
// }

async function sendHome(bot: TelegramBot, chatId: number) {
  await bot.sendMessage(
    chatId,
    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    { reply_markup: mainMenu },
  );
}

async function sendProfile(bot: TelegramBot, chatId: number) {
  await connectDB();
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.",
      { reply_markup: mainMenu },
    );
    return;
  }

  const nickname = user.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
  const bonus = user.bonus || 0;

  await bot.sendMessage(
    chatId,
    `üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n–ù–∏–∫–Ω–µ–π–º: ${nickname}\n–ë–æ–Ω—É—Å—ã: ${bonus}`,
    { reply_markup: mainMenu },
  );
}

async function sendPrice(bot: TelegramBot, chatId: number) {
  await bot.sendMessage(
    chatId,
    "sdfsfddf",
    { reply_markup: mainMenu },
  );
}

function normalizePhoneForTel(phone: string) {
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø–ª—é—Å ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è tel: —Å—Å—ã–ª–∫–∏
  return phone.replace(/[^+\d]/g, "");
}

async function sendContacts(bot: TelegramBot, chatId: number) {
  const phoneRaw = CONTACTS_STATIC.phone; // –Ω–∞–ø—Ä–∏–º–µ—Ä "+7 (999) 123-45-67"
  const phoneForTel = normalizePhoneForTel(phoneRaw); // "+79991234567"
  const telUrl = `tel:${phoneForTel}`;

  const vkUrl = CONTACTS_STATIC.vk; // –Ω–∞–ø—Ä–∏–º–µ—Ä "https://vk.com/yourgroup"
  const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(CONTACTS_STATIC.address)}`;

  const text = `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\nüì± ${phoneRaw}\nüåê ${vkUrl}\nüìç ${CONTACTS_STATIC.address}`;

  const keyboard = {
    inline_keyboard: [
      [{ text: "üì± –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url: telUrl }],
      [{ text: "üåê –û—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É –í–ö", url: vkUrl }],
      [{ text: "üìç –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö", url: mapsUrl }],
    ],
  };

  await bot.sendMessage(chatId, text, { reply_markup: keyboard });
}

export async function handleStart(bot: TelegramBot, msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  setUser(chatId, { step: "await_nickname" });

  await bot.sendMessage(
    chatId,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:",
  );
}

export async function handleText(bot: TelegramBot, msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  const text = (msg.text || "").trim();
  const user = getUser(chatId);

  // –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–∞—è"
  if (text === "üè† –ì–ª–∞–≤–Ω–∞—è") {
    await sendHome(bot, chatId);
    return;
  }

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —à–∞–≥–∏
  if (user.step === "await_nickname") {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ –ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
    setUser(chatId, { nickname: text, step: "await_contact" });
    await bot.sendMessage(
      chatId,
      `–û—Ç–ª–∏—á–Ω–æ, ${text}! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:`,
      { reply_markup: shareContactKeyboard },
    );
    return;
  }

  // –ú–µ–Ω—é
  if (text === "üë§ –ü—Ä–æ—Ñ–∏–ª—å") {
    await sendProfile(bot, chatId);
    return;
  }

  if (text === "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã") {
    await sendContacts(bot, chatId);
    return;
  }

  if (text === "üíµ –¶–µ–Ω—ã") {
    await sendPrice(bot, chatId);
    return;
  }

  if (text === "üí¨ –û—Ç–∑—ã–≤—ã") {
    setUser(chatId, { step: "await_review" });
    await bot.sendMessage(chatId, "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", { reply_markup: homeOnly });
    return;
  }

  if (text === "üéÅ –ê–∫—Ü–∏–∏") {
    setUser(chatId, { step: "await_promo" });
    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", { reply_markup: homeOnly });

    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–≥–æ–≤
  if (user.step === "await_review") {
    setUser(chatId, { lastReview: text, step: null });
    await bot.sendMessage(
      chatId,
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üôå",
      { reply_markup: mainMenu },
    );
    return;
  }

  if (user.step === "await_promo") {
  // –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const validPromos = ["PROMO2024", "HELLO", "BONUS100"];

    if (validPromos.includes(text.toUpperCase())) {
      setUser(chatId, { lastPromo: text, step: null });
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! üéâ",
        { reply_markup: mainMenu },
      );
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã
    } else {
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
        { reply_markup: homeOnly },
      );
    // step –Ω–µ –º–µ–Ω—è–µ–º ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
    }
    return;
  }

  // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  await sendHome(bot, chatId);
}

export async function handleContact(bot: TelegramBot, msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  const phone = msg.contact?.phone_number || null;
  const name = msg.from?.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

  if (!phone) {
    await bot.sendMessage(chatId, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", {
      reply_markup: shareContactKeyboard,
    });
    return;
  }

  await connectDB();
  const user = await User.create({
    name,
    phone,
    chatId,
  });

  // eslint-disable-next-line no-console
  console.log("New user registered:", user);

  if (!user) {
    await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  await bot.sendMessage(
    chatId,
    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ",
    { reply_markup: mainMenu },
  );
  await sendProfile(bot, chatId);
}
