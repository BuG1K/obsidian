// pages/api/telegramWebhook.ts
import connectDB from "@/database/db";
import TaxiOrder from "@/database/TaxiOrder";
import TaxiUser from "@/database/TaxiUser";
import { NextRequest } from "next/server";
import TelegramBot from "node-telegram-bot-api";

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN_TAXI || "";
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

const GET = async (request: NextRequest) => {
  const phone = request.nextUrl.searchParams.get("phone") as string;
  const orderId = request.nextUrl.searchParams.get("orderId") as string;

  if (!phone) {
    return new Response(JSON.stringify({
      error: "Phone is required",
    }), { status: 404 });
  }

  await connectDB();
  const user = await TaxiUser.findOne({ phone });

  if (!user) {
    return new Response(JSON.stringify({
      error: "User not found",
    }), { status: 404 });
  }

  // eslint-disable-next-line no-underscore-dangle
  const order = await TaxiOrder.create({ userId: user._id, orderId, code: "123234" });

  if (!order) {
    return new Response(JSON.stringify({
      error: "Failed to create order",
    }), { status: 500 });
  }

  const status = await bot.sendMessage(
    user.chatId,
    `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É! üéâ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:${orderId}`,
  );

  if (!status) {
    return new Response(JSON.stringify({
      error: "Failed to send message",
    }), { status: 500 });
  }

  return new Response(JSON.stringify({ ok: true }), { status: 200 });
};

const POST = async (request: NextRequest) => {
  try {
    const update = await request.json();

    // eslint-disable-next-line no-console
    console.log("Telegram update:", JSON.stringify(update));

    const msg = update.message || update.edited_message || null;
    const chatId = msg?.chat?.id;

    if (msg) {
      // /start
      if (msg.text === "/start") {
        await bot.sendMessage(chatId, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏ üöñ", {
          reply_markup: {
            keyboard: [
              [
                {
                  text: "üì≤ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏",
                  request_contact: true, // –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                },
              ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });

        return new Response("ok", { status: 200 });
      }

      // –ö–æ–Ω—Ç–∞–∫—Ç (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")
      if (msg.contact) {
        const phone = msg.contact?.phone_number || null;
        const name = msg.from?.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

        if (!phone) {
          await bot.sendMessage(
            chatId,
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –µ—â—ë —Ä–∞–∑.",
          );

          return new Response("ok", { status: 200 });
        }

        await connectDB();

        let user = await TaxiUser.findOne({ phone });

        if (user) {
          await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ü–∏–∏ üéâ`);
        }

        user = await TaxiUser.create({
          name,
          phone,
          chatId,
        });

        if (!user) {
          await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

          return new Response("ok", { status: 200 });
        }

        await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ü–∏–∏ üéâ`);

        return new Response("ok", { status: 200 });
      }

      // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç/–∫–Ω–æ–ø–∫–∏
      if (typeof msg.text === "string") {
        await bot.sendMessage(
          chatId,
          "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üöñ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–µ–∑–¥–∫—É –º—ã –¥–∞—Ä–∏–º –∫–æ–¥ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
        );
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ message (–Ω–∞–ø—Ä–∏–º–µ—Ä, callback_query –∏ —Ç.–ø.) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–∫
    return new Response("ok", { status: 200 });
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error("Webhook error:", e);
    return new Response("ok", { status: 200 }); // Telegram –∂–¥—ë—Ç 200, –¥–∞–∂–µ –ø—Ä–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
  }
};

export { GET, POST };
